fileTypes: [
  "tcl"
  "tm"
  "tk"
]
firstLineMatch: "^#!/.*\\b(tclsh|wish)(8|8\\.\\d+)?\\b"
name: "Tcl"
patterns: [
  {
    begin: "(?<=^|;)\\s*((#))"
    beginCaptures:
      "1":
        name: "comment.line.number-sign.tcl"
      "2":
        name: "punctuation.definition.comment.tcl"
    contentName: "comment.line.number-sign.tcl"
    end: "\\n"
    patterns: [
      {
        match: "(\\\\\\\\|\\\\\\n)"
      }
    ]
  }
  {
    captures:
      "1":
        name: "keyword.control.tcl"
    match: "(?<=^|[\\[{;}])\\s*(if|while|for|catch|return|break|continue|switch|exit|foreach|case|throw|yieldto|tailcall|yield|default|argc|argv0|argv)\\b"
  }
  {
    captures:
      "1":
        name: "keyword.control.tcl"
    match: "(?<=^|})\\s*(then|elseif|else)\\b"
  }
  {
    captures:
      "1":
        name: "entity.name.window.tcl"
    match: "(\\.[a-zA-Z_][^\\s]+)\\b"
  }
  {
    captures:
      "1":
        name: "keyword.other.tcl"
      "2":
        name: "entity.name.function.tcl"
    match: "^\\s*(proc)\\s+([^\\s]+)"
  }
  {
    captures:
      "1":
        name: "keyword.other.tcl"
    match: "(?<=^|[\\[{;])\\s*(after|append|array|auto_execok|auto_import|auto_load|auto_mkindex|auto_mkindex_old|auto_qualify|auto_reset|bgerror|binary|cd|clock|close|concat|dde|encoding|eof|error|eval|exec|expr|fblocked|fconfigure|fcopy|file|fileevent|filename|flush|format|gets|glob|global|history|http|incr|info|interp|join|lappend|library|lindex|linsert|list|llength|load|lrange|lreplace|lsearch|lset|lsort|memory|msgcat|namespace|open|package|parray|pid|pkg::create|pkg_mkIndex|proc|puts|pwd|re_syntax|read|registry|rename|resource|scan|seek|set|socket|SafeBase|source|split|string|subst|Tcl|tcl_endOfWord|tcl_findLibrary|tcl_startOfNextWord|tcl_startOfPreviousWord|tcl_wordBreakAfter|tcl_wordBreakBefore|tcltest|tclvars|tell|time|trace|unknown|unset|update|uplevel|upvar|variable|vwait|auto_load_index|lassign|coroutine|lreverse|lmap|unload|apply|zlib|chan|dict|lrepeat|tclLog|bell|clipboard|event|font|image|option|selection|send|tk|tk_bisque|tk_chooseColor|tk_getOpenFile|tk_getSaveFile|tk_messageBox|tk_setPalette|tkwait|tkerror|tkvars|winfo|wm|bind|bindtags|button|canvas|checkbutton|destroy|entry|focus|frame|grab|grid|label|listbox|lower|menu|menubutton|message|pack|place|radiobutton|raise|scale|scrollbar|text|tk_menuSetFocus|tk_optionMenu|tk_popup|tk_textCopy|tk_textCut|tk_dialog|tk_textPaste|toplevel|ArrowButton|ButtonBox|Button|ComboBox|Dialog|Entry|LabelEntry|LabelFrame|Label|ListBox|MainFrame|MessageDlg|NoteBook|PagesManager|PanedWindow|PanelFrame|PasswdDlg|ProgressBar|ProgressDlg|ScrollableFrame|ScrolledWindow|ScrollView|SelectColor|SelectFont|Separator|SpinBox|StatusBar|TitleFrame|Tree)\\b"
  }
  {
    match: "(?<=^|[\\[{;])\\s*(regexp|regsub)\\b";
    captures:
      "1":
        name: "keyword.other.tcl"
  }
  {
    include: "#escape"
  }
  {
    include: "#variable"
  }
  {
    begin: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.tcl"
    end: "\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.tcl"
    name: "string.quoted.double.tcl"
    patterns: [
      {
        include: "#escape"
      }
      {
        include: "#variable"
      }
      {
        include: "#embedded"
      }
    ]
  }
]
repository:
  "bare-string":
    begin: "(?:^|(?<=\\s))\""
    comment: "matches a single quote-enclosed word without scoping"
    end: "\"([^\\s\\]]*)"
    endCaptures:
      "1":
        name: "invalid.illegal.tcl"
    patterns: [
      {
        include: "#escape"
      }
      {
        include: "#variable"
      }
    ]
  braces:
    begin: "(?:^|(?<=\\s))\\{"
    comment: "matches a single brace-enclosed word"
    end: "\\}([^\\s\\]]*)"
    endCaptures:
      "1":
        name: "invalid.illegal.tcl"
    patterns: [
      {
        match: "\\\\[{}\\n]"
        name: "constant.character.escape.tcl"
      }
      {
        include: "#inner-braces"
      }
    ]
  embedded:
    begin: "\\["
    beginCaptures:
      "0":
        name: "punctuation.section.embedded.begin.tcl"
    end: "\\]"
    endCaptures:
      "0":
        name: "punctuation.section.embedded.end.tcl"
    name: "source.tcl.embedded"
    patterns: [
      {
        include: "$self"
      }
    ]
  escape:
    match: "\\\\(\\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\\n)"
    name: "constant.character.escape.tcl"
  "inner-braces":
    begin: "\\{"
    comment: "matches a nested brace in a brace-enclosed word"
    end: "\\}"
    patterns: [
      {
        match: "\\\\[{}\\n]"
        name: "constant.character.escape.tcl"
      }
      {
        include: "#inner-braces"
      }
    ]
  regexp:
    begin: "(?=\\S)(?![\\n;\\]])"
    comment: "matches a single word, named as a regexp, then swallows the rest of the command"
    end: "(?=[\\n;\\]])"
    patterns: [
      {
        begin: "(?=[^ \\t\\n;])"
        end: "(?=[ \\t\\n;])"
        name: "string.regexp.tcl"
        patterns: [
          {
            include: "#braces"
          }
          {
            include: "#bare-string"
          }
          {
            include: "#escape"
          }
          {
            include: "#variable"
          }
          {
            include: '#string'
          }
        ]
      }
      {
        begin: "[ \\t]"
        comment: "swallow the rest of the command"
        end: "(?=[\\n;\\]])"
        patterns: [
          {
            include: "#variable"
          }
          {
            include: "#embedded"
          }
          {
            include: "#escape"
          }
          {
            include: "#braces"
          }
          {
            include: '#inner-braces'
          }
          {
            include: '#string'
          }
        ]
      }
    ]
  string:
    applyEndPatternLast: 1
    begin: "(?:^|(?<=\\s))(?=\")"
    comment: "matches a single quote-enclosed word with scoping"
    end: ""
    name: "string.quoted.double.tcl"
    patterns: [
      {
        include: "#bare-string"
      }
    ]
  variable:
    captures:
      "1":
        name: "punctuation.definition.variable.tcl"
    match: "(\\$)((?:[a-zA-Z0-9_]|::)+(\\([^\\)]+\\))?|\\{[^\\}]*\\})"
    name: "variable.other.tcl"
  windowname:
    captures:
      "1":
        name: "entity.name.window.tcl"
    match: "\\s\\.[a-zA-Z_][a-zA-Z0-9_\\.]*"
scopeName: "source.tcl"
